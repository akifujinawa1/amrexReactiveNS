Host Name: ironmontreal
=== If no file names and line numbers are shown below, one can run
            addr2line -Cpfie my_exefile my_line_address
    to convert `my_line_address` (e.g., 0x4a6b) into file name and line number.
    Or one can use amrex/Tools/Backtrace/parse_bt.py.

=== Please note that the line number reported by addr2line may not be accurate.
    One can use
            readelf -wl my_exefile | grep my_line_address'
    to find out the offset for that line.

 0: ./main1d.gnu.ex(+0x11147d) [0x55a79bfb147d]
    amrex::BLBackTrace::print_backtrace_info(_IO_FILE*) at /usr/include/x86_64-linux-gnu/bits/unistd.h:354
 (inlined by) amrex::BLBackTrace::print_backtrace_info(_IO_FILE*) at /home/afujinawa/amrexEuler/euler/Exec/UniformVelocity/../../../../amrex/Src/Base/AMReX_BLBackTrace.cpp:196

 1: ./main1d.gnu.ex(+0x1133b5) [0x55a79bfb33b5]
    amrex::BLBackTrace::handler(int) at /home/afujinawa/amrexEuler/euler/Exec/UniformVelocity/../../../../amrex/Src/Base/AMReX_BLBackTrace.cpp:96

 2: /lib/x86_64-linux-gnu/libc.so.6(+0x46210) [0x7f99ee257210]

 3: /lib/x86_64-linux-gnu/libm.so.6(+0x83314) [0x7f99ee4c4314]
    amrex::DistributionMapping::makeKnapSack(amrex::LayoutData<double> const&, double&, double&, int, bool, int, double) at /usr/include/c++/9/ext/new_allocator.h:89

 4: /lib/x86_64-linux-gnu/libm.so.6(powf64+0x18) [0x7f99ee484208]
    ?? ??:0

 5: ./main1d.gnu.ex(+0x3963f) [0x55a79bed963f]
    mu(double const&, double const&) at /home/afujinawa/amrexReactiveNS/reactiveNS/Exec/UniformVelocity/../../Source/diffusionFunc.cpp:375
 (inlined by) diffusiveSpeed(amrex::Vector<double, std::allocator<double> > const&, amrex::Vector<double, std::allocator<double> > const&) at /home/afujinawa/amrexReactiveNS/reactiveNS/Exec/UniformVelocity/../../Source/diffusionFunc.cpp:352

 6: ./main1d.gnu.ex(+0x260b0) [0x55a79bec60b0]
    double const& std::max<double>(double const&, double const&) at /usr/include/c++/9/bits/stl_algobase.h:228
 (inlined by) AmrLevelAdv::estTimeStep(double) at /home/afujinawa/amrexReactiveNS/reactiveNS/Exec/UniformVelocity/../../Source/AmrLevelAdv.cpp:763

 7: ./main1d.gnu.ex(+0x26921) [0x55a79bec6921]
    amrex::Vector<double, std::allocator<double> >::operator[](unsigned long) at /home/afujinawa/amrexReactiveNS/reactiveNS/Exec/UniformVelocity/../../../../amrex/Src/Base/AMReX_Vector.H:37
 (inlined by) AmrLevelAdv::computeNewDt(int, int, amrex::Vector<int, std::allocator<int> >&, amrex::Vector<amrex::IntVect, std::allocator<amrex::IntVect> > const&, amrex::Vector<double, std::allocator<double> >&, amrex::Vector<double, std::allocator<double> >&, double, int) at /home/afujinawa/amrexReactiveNS/reactiveNS/Exec/UniformVelocity/../../Source/AmrLevelAdv.cpp:881
 (inlined by) AmrLevelAdv::computeNewDt(int, int, amrex::Vector<int, std::allocator<int> >&, amrex::Vector<amrex::IntVect, std::allocator<amrex::IntVect> > const&, amrex::Vector<double, std::allocator<double> >&, amrex::Vector<double, std::allocator<double> >&, double, int) at /home/afujinawa/amrexReactiveNS/reactiveNS/Exec/UniformVelocity/../../Source/AmrLevelAdv.cpp:858

 8: ./main1d.gnu.ex(+0x15bdb3) [0x55a79bffbdb3]
    amrex::Amr::coarseTimeStep(double) at /home/afujinawa/amrexEuler/euler/Exec/UniformVelocity/../../../../amrex/Src/Amr/AMReX_Amr.cpp:2104

 9: ./main1d.gnu.ex(+0x208ed) [0x55a79bec08ed]
    main at /home/afujinawa/amrexReactiveNS/reactiveNS/Exec/UniformVelocity/../../Source/main.cpp:93

10: /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf3) [0x7f99ee2380b3]

11: ./main1d.gnu.ex(+0x24bde) [0x55a79bec4bde]
    ?? ??:0

